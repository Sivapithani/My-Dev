public with sharing class CRTimeAllocationTrackingController 
{
    public list<clientRequestWrapper> results {get; set;}

    public Case filterCase {get; set;}
    public ocm_ProcessTask__c filterPT {get; set;}  
    public ocm_Time_Allocation_Period__c timeAllPer{get; set;}  
    public ocm_Event__c filterInputEvent {get;set;}    
    private static String sortBy {get;set;}
    private boolean sortAscending {get;set;}

    public string selectedCase {get; set;}
    public string crReqCaseId {get; set;}
    public string crRecCaseId {get; set;}
    public Integer total_size {get; set;}
    public Decimal total_PTsize {get; set;}
    private Integer counter=0;
    private Integer list_size=300;
    private boolean totFlag;
    public String selectedOwnedByOption {get; set;}
    
    Date stDate;
    Date endDate;
    
    public CRTimeAllocationTrackingController() 
    {
        totFlag = true;
        sortAscending = true;
        filterInputEvent = new ocm_Event__c();
        filterInputEvent.Assigned_To__c = Userinfo.getUserId();        
        results = new list<clientRequestWrapper>();        
        ocm_Time_Allocation_Period__c tap = [Select o.Period__c From ocm_Time_Allocation_Period__c o where Locked__c = false order by Start_Date__c asc limit 1];
        if(tap != null && tap.Period__c != null)
            selectedOwnedByOption = tap.Period__c;
        loadData();
    }    
    
    public void loadData()
    {        
        results = new list<clientRequestWrapper>(); 
        total_size = 0;
        if(string.isNotEmpty(selectedOwnedByOption))
        {
            if(selectedOwnedByOption.split(' - ')[0] != null)
                stDate = date.parse(selectedOwnedByOption.split(' - ')[0]);
            if(selectedOwnedByOption.split(' - ')[1] != null)
                endDate = date.parse(selectedOwnedByOption.split(' - ')[1]);
        }
        //list<Case> caseList = [Select c.CaseNumber, c.Total_Allocated_Time__c, c.Time__c, c.Subject, c.Strategies_Selected__c, c.Status, c.Request_Received_Date__c, c.Overall_Due_Date__c, c.Id, c.Fund_Code__c, c.Date_Closed__c, c.CreatedDate, Owner.Name, (Select Id, Total_Allocated_Time__c From Time_Allocations__r where Period__c = :selectedOwnedByOption), (Select Id, Name, CreatedDate, Status__c, Task_Completed_Date__c, Task_Due_Date__c, Assigned_By__c, Assigned_Date__c, Task_Time_Intensity__c, Total_Allocated_Time__c From Process_Task__r where (Assigned_By__c = :filterInputEvent.Assigned_To__c AND RecordType.DeveloperName = :OCM_Constants.CASE_CLIENT_REQ_PT_RECORD_DEV_NAME AND Id IN (Select Process_Task__c From ocm_Time_Allocation__c where Period__c = :selectedOwnedByOption)) order by Task_Due_Date__c asc) From Case c where (Id IN (Select Client_Request__c  From ocm_Time_Allocation__c where Period__c = :selectedOwnedByOption) AND c.OwnerId = :filterInputEvent.Assigned_To__c AND ((c.RecordType.DeveloperName = :OCM_Constants.CASE_CLIENT_REQ_RECORD_DEV_NAME OR (c.RecordType.DeveloperName = :OCM_Constants.CASE_RECUR_CLIENT_REQ_RECORD_DEV_NAME AND c.ParentId != null)))) order by Overall_Due_Date__c asc];
        /*list<Case> caseList = [Select c.CaseNumber, c.Total_Allocated_Time__c, c.Time__c, c.Subject, c.Strategies_Selected__c, c.Status, c.Request_Received_Date__c, c.Overall_Due_Date__c, c.Id, c.Fund_Code__c, c.Date_Closed__c, c.CreatedDate, Owner.Name, 
                                (Select Id, Total_Allocated_Time__c From Time_Allocations__r where Period__c = :selectedOwnedByOption), 
                                (Select Id, Name, CreatedDate, Status__c, Task_Completed_Date__c, Task_Due_Date__c, Assigned_By__c, Assigned_Date__c, Task_Time_Intensity__c, Total_Allocated_Time__c 
                                From Process_Task__r where (Id IN (Select Process_Task__c From ocm_Time_Allocation__c where Period__c = :selectedOwnedByOption) AND Assigned_By__c = :filterInputEvent.Assigned_To__c AND (RecordType.DeveloperName = :OCM_Constants.CASE_CLIENT_REQ_PT_RECORD_DEV_NAME AND ((Status__c IN (:OCM_Constants.OCM_STATUS_OPEN,'Waiting on Client') AND Assigned_Date__c <= :endDate) OR  (Status__c IN (:OCM_Constants.OCM_STATUS_COMPLETED, :OCM_Constants.OCM_STATUS_CANCELLED) AND Task_Completed_Date__c >= :stDate)))) order by Task_Due_Date__c asc) 
                                From Case c where (Id IN (Select Client_Request__c  From ocm_Time_Allocation__c where Period__c = :selectedOwnedByOption) AND c.OwnerId = :filterInputEvent.Assigned_To__c AND ((c.RecordType.DeveloperName = :OCM_Constants.CASE_CLIENT_REQ_RECORD_DEV_NAME AND ((c.Status IN (:OCM_Constants.OCM_STATUS_OPEN,'Waiting on Client') AND Request_Received_Date__c <= :endDate) OR (c.Status IN (:OCM_Constants.OCM_STATUS_COMPLETED, :OCM_Constants.OCM_STATUS_CANCELLED) AND ClosedDate >= :stDate))) OR (c.RecordType.DeveloperName = :OCM_Constants.CASE_RECUR_CLIENT_REQ_RECORD_DEV_NAME AND c.ParentId != null AND ((c.Status IN (:OCM_Constants.OCM_STATUS_OPEN,'Waiting on Client') AND CreatedDate <= :endDate) OR (c.Status IN (:OCM_Constants.OCM_STATUS_COMPLETED, :OCM_Constants.OCM_STATUS_CANCELLED) AND ClosedDate >= :stDate)))))
                                order by Overall_Due_Date__c asc];*/
        /*
        list<Case> caseList = [Select c.CaseNumber, c.Total_Allocated_Time__c, c.Time__c, c.Subject, c.Strategies_Selected__c, c.Status, c.Request_Received_Date__c, c.Overall_Due_Date__c, c.Id, c.Fund_Code__c, c.Date_Closed__c, c.CreatedDate, Owner.Name, 
                                (Select Id, Total_Allocated_Time__c From Time_Allocations__r where Period__c = :selectedOwnedByOption), 
                                (Select Id, Name, CreatedDate, Status__c, Task_Completed_Date__c, Task_Due_Date__c, Assigned_By__c, Assigned_Date__c, Task_Time_Intensity__c, Total_Allocated_Time__c 
                                From Process_Task__r where (Assign_To_Name__c = :filterInputEvent.Assigned_To__c AND (RecordType.DeveloperName = :OCM_Constants.CASE_CLIENT_REQ_PT_RECORD_DEV_NAME AND ((Status__c IN (:OCM_Constants.OCM_STATUS_OPEN,'Waiting on Client') AND Assigned_Date__c <= :endDate) OR  (Status__c IN (:OCM_Constants.OCM_STATUS_COMPLETED, :OCM_Constants.OCM_STATUS_CANCELLED) AND Task_Completed_Date__c >= :stDate)))) order by Task_Due_Date__c asc) 
                                From Case c where (c.OwnerId = :filterInputEvent.Assigned_To__c AND ((c.RecordType.DeveloperName = :OCM_Constants.CASE_CLIENT_REQ_RECORD_DEV_NAME AND ((c.Status IN (:OCM_Constants.OCM_STATUS_OPEN,'Waiting on Client') AND Request_Received_Date__c <= :endDate) OR (c.Status IN (:OCM_Constants.OCM_STATUS_COMPLETED, :OCM_Constants.OCM_STATUS_CANCELLED) AND ClosedDate >= :stDate))) OR (c.RecordType.DeveloperName = :OCM_Constants.CASE_RECUR_CLIENT_REQ_RECORD_DEV_NAME AND c.ParentId != null AND ((c.Status IN (:OCM_Constants.OCM_STATUS_OPEN,'Waiting on Client') AND CreatedDate <= :endDate) OR (c.Status IN (:OCM_Constants.OCM_STATUS_COMPLETED, :OCM_Constants.OCM_STATUS_CANCELLED) AND ClosedDate >= :stDate)))))
                                order by Overall_Due_Date__c asc];*/
        User ConName = [Select Name from User where Id = :filterInputEvent.Assigned_To__c limit 1];
        list<Case> caseList = [Select c.CaseNumber, c.Total_Allocated_Time__c, c.Time__c, c.Subject, c.Strategies_Selected__c, c.Status, c.Request_Received_Date__c, c.Overall_Due_Date__c, c.Id, c.Fund_Code__c, c.Date_Closed__c, c.CreatedDate, Owner.Name, c.Total_Allocated_Time_Case__c, 
                              (Select Id, Total_Allocated_Time__c From Time_Allocations__r where Period__c = :selectedOwnedByOption) 
                                From Case c where (c.OwnerId = :filterInputEvent.Assigned_To__c AND ((c.RecordType.DeveloperName = :OCM_Constants.CASE_CLIENT_REQ_RECORD_DEV_NAME AND ((c.Status IN (:OCM_Constants.OCM_STATUS_OPEN,'Waiting on Client') AND Request_Received_Date__c <= :endDate) OR (c.Status IN (:OCM_Constants.OCM_STATUS_COMPLETED, :OCM_Constants.OCM_STATUS_CANCELLED) AND ClosedDate >= :stDate))) OR (c.RecordType.DeveloperName = :OCM_Constants.CASE_RECUR_CLIENT_REQ_RECORD_DEV_NAME AND c.ParentId != null AND ((c.Status IN (:OCM_Constants.OCM_STATUS_OPEN,'Waiting on Client') AND CreatedDate <= :endDate) OR (c.Status IN (:OCM_Constants.OCM_STATUS_COMPLETED, :OCM_Constants.OCM_STATUS_CANCELLED) AND ClosedDate >= :stDate)))))
                                order by Overall_Due_Date__c asc];
                                
        list<ocm_ProcessTask__c> ProcessTaskList = [Select Id, Case__c, Case__r.CaseNumber, Case__r.Strategies_Selected__c, Case__r.Fund_Code__c, Name, CreatedDate, Status__c, Task_Completed_Date__c, Task_Due_Date__c, Assigned_By__c, Assigned_Date__c, Task_Time_Intensity__c, Total_Allocated_Time__c,
        											(Select Name, Time_Allocation_Period__c, Total_Allocated_Time__c, Period__c From Time_Allocations__r where Period__c = :selectedOwnedByOption) 
                                					From ocm_ProcessTask__c where (Assign_To_Name__r.Name = :ConName.Name AND (RecordType.DeveloperName = :OCM_Constants.CASE_CLIENT_REQ_PT_RECORD_DEV_NAME AND ((Status__c IN (:OCM_Constants.OCM_STATUS_OPEN,'Waiting on Client') AND Assigned_Date__c <= :endDate) OR  (Status__c IN (:OCM_Constants.OCM_STATUS_COMPLETED, :OCM_Constants.OCM_STATUS_CANCELLED) AND Task_Completed_Date__c >= :stDate))))
                                					order by Task_Due_Date__c asc];                  
        
        set<Id> ptIdSet = new set<Id>();
        /*
        for(Case ca: caseList)
        {
            for(ocm_ProcessTask__c pt: ca.Process_Task__r)
                ptIdSet.add(pt.Id);
        }   
        list<ocm_ProcessTask__c> processTaskList = [Select Id, Case__c, Name, CreatedDate, Status__c, Task_Completed_Date__c, Task_Due_Date__c, Assigned_By__c, Assigned_Date__c, Task_Time_Intensity__c, Total_Allocated_Time__c, (Select Name, Time_Allocation_Period__c, Total_Allocated_Time__c, Period__c From Time_Allocations__r where Period__c = :selectedOwnedByOption) From ocm_ProcessTask__c o where Id IN :ptIdSet order by Task_Due_Date__c asc];                
        */
        map<Id, list<ocm_ProcessTask__c>> ptMap = new map<Id, list<ocm_ProcessTask__c>>();        
        for(ocm_ProcessTask__c pt : processTaskList)
        {
            list<ocm_ProcessTask__c> ptList = new list<ocm_ProcessTask__c>();
            if(ptMap != null && ptMap.containsKey(pt.Case__c))
            {
                ptList.add(pt);
                ptList.addAll(ptMap.get(pt.Case__c));
                ptMap.remove(pt.Case__c);
                ptMap.put(pt.Case__c, ptList);
            }
            else
            {
                ptList.add(pt);
                ptMap.put(pt.Case__c, ptList);
            }
        }
        
        for(Case ca: caseList)
        {
            clientRequestWrapper crw = new clientRequestWrapper();        
            ca.Total_Allocated_Time__c = null;    
            if(ca.Time_Allocations__r != null && ca.Time_Allocations__r.size() > 0)
                ca.Total_Allocated_Time__c = ca.Time_Allocations__r[0].Total_Allocated_Time__c;
                
            crw.caseRec = ca;    
            list<ocm_ProcessTask__c> ptList = new list<ocm_ProcessTask__c>();
            if(ptMap != null && ptMap.get(ca.Id) != null)
            {
                for(ocm_ProcessTask__c pt : ptMap.get(ca.Id))
                {
                    ptIdSet.add(pt.Id);
                    pt.Total_Allocated_Time__c = null;
                    if(pt.Time_Allocations__r != null && pt.Time_Allocations__r.size() > 0)
                        pt.Total_Allocated_Time__c = pt.Time_Allocations__r[0].Total_Allocated_Time__c;
                        
                    ptList.add(pt);    
                }
                if(ptList != null && ptList.size() > 0)
                {
                    ptList.sort();
                    crw.processTaskList = ptList;
                }
            }
            results.add(crw);
        }
        
        ptMap.clear();
        for(ocm_ProcessTask__c pt : processTaskList)
        {
            if(!(ptIdSet.contains(pt.Id)))
            {
	            list<ocm_ProcessTask__c> ptList = new list<ocm_ProcessTask__c>();
	            if(ptMap != null && ptMap.containsKey(pt.Case__c))
	            {
	                ptList.add(pt);
	                ptList.addAll(ptMap.get(pt.Case__c));
	                ptMap.remove(pt.Case__c);
	                ptMap.put(pt.Case__c, ptList);
	            }
	            else
	            {
	                ptList.add(pt);
	                ptMap.put(pt.Case__c, ptList);
	            }
            }
        }
        
        for(Id pt : ptMap.keySet())
        {
    		clientRequestWrapper crw = new clientRequestWrapper();
    		list<ocm_ProcessTask__c> locPt = new list<ocm_ProcessTask__c>();
    		locPt.addAll(ptMap.get(pt));
    		crw.processTaskList = locPt;
    		results.add(crw);
        }
        
        
        for(clientRequestWrapper ca: results)
        {
            if(ca.caseRec != null)
            	total_size += 1;
            if(ca.processTaskList != null && ca.processTaskList.size() > 0)
                total_size += ca.processTaskList.size();
        }
        sumHours();
    }
    
    public list<SelectOption> getOwnedByOptions()
    {
        list<SelectOption> options = new list<SelectOption>();
        for(ocm_Time_Allocation_Period__c tp : [Select o.Period__c From ocm_Time_Allocation_Period__c o where Locked__c = false order by Start_Date__c asc])        
            options.add(new SelectOption(tp.Period__c, tp.Period__c));
        return options;
    }
     
    public PageReference updateData()
    {
        Savepoint sp = Database.setSavepoint();
        try
        {
            if(results != null && results.size() > 0)
            {                
                ocm_Time_Allocation_Period__c tap = [Select Id From ocm_Time_Allocation_Period__c where Period__c = :selectedOwnedByOption limit 1];
                set<ocm_Time_Allocation__c> updatedTAset = new set<ocm_Time_Allocation__c>();
                for(clientRequestWrapper ca: results)
                {
					if(ca.caseRec != null)
					{
					    if(ca.caseRec.Time_Allocations__r != null && ca.caseRec.Time_Allocations__r.size() > 0)                         
					    {
					        if(ca.caseRec.Time_Allocations__r[0].Total_Allocated_Time__c != ca.caseRec.Total_Allocated_Time__c)
					        {
					            ocm_Time_Allocation__c ta = new ocm_Time_Allocation__c(Id = ca.caseRec.Time_Allocations__r[0].Id);
					            ta.Total_Allocated_Time__c = ca.caseRec.Total_Allocated_Time__c;
					            updatedTAset.add(ta);
					        }
					    }
					    else
					    {
					        if(ca.caseRec.Total_Allocated_Time__c != null)
					        {
					            ocm_Time_Allocation__c newTACase = new ocm_Time_Allocation__c();
					            newTACase.Time_Allocation_Period__c = tap.Id;
					            newTACase.Client_Request__c = ca.caseRec.Id;
					            newTACase.Total_Allocated_Time__c = ca.caseRec.Total_Allocated_Time__c;
					            newTACase.Owner__c = filterInputEvent.Assigned_To__c;
					            updatedTAset.add(newTACase);
					        }
					    }
					}                    
					if(ca.processTaskList != null && ca.processTaskList.size() > 0)
					{
					     for(ocm_ProcessTask__c pt :ca.processTaskList)
					     {
					        if(pt.Time_Allocations__r != null && pt.Time_Allocations__r.size() > 0)
					        {
					            if(pt.Time_Allocations__r[0].Total_Allocated_Time__c != pt.Total_Allocated_Time__c)
					            {
					                ocm_Time_Allocation__c ta2 = new ocm_Time_Allocation__c(Id = pt.Time_Allocations__r[0].Id);
					                ta2.Total_Allocated_Time__c = pt.Total_Allocated_Time__c;
					                updatedTAset.add(ta2);
					            }
					        }
					        else
					        {
					            if(pt.Total_Allocated_Time__c != null)
					            {
					                ocm_Time_Allocation__c newTACase2 = new ocm_Time_Allocation__c();
					                newTACase2.Time_Allocation_Period__c = tap.Id;
					                newTACase2.Process_Task__c = pt.Id;
					                newTACase2.Total_Allocated_Time__c = pt.Total_Allocated_Time__c;
					                newTACase2.Owner__c = filterInputEvent.Assigned_To__c;
					                updatedTAset.add(newTACase2);
					            }
					        }
					     }
					}
                }
                if(updatedTAset != null && updatedTAset.size()>0)
                {
                    list<ocm_Time_Allocation__c> updatedTAlist = new list<ocm_Time_Allocation__c>();
                    updatedTAlist.addAll(updatedTAset);
                    upsert updatedTAlist;
                }
                //loadData();            
            }
            return null;
        }
        catch(Exception e)
        {    
            if(ApexPages.getMessages() != null && ApexPages.getMessages().size() <= 0)
                ApexPages.addMessage(new ApexPages.Message(ApexPages.SEVERITY.ERROR,e.getMessage()));
            Database.rollback(sp);            
            return null;
        }
    }    
    /*
    private void spiltData()
    {
        results2 = new list<clientRequestWrapper>();

        Integer resSize = 0;
        Integer lstSize = 0;
        list_size = 300;
        Integer list_size2 = list_size;        
        if(results != null && results.size() > 0)
        {   
            for(integer i = counter; i < (list_size+counter); i++)
            {
                if(results.size() > i && results[i] != null)
                {
                    resSize = resSize+1;                        
                    if(results[i].caseRec.Process_Task__r != null && results[i].caseRec.Process_Task__r.size() > 0)
                    {
                        for(ocm_ProcessTask__c pt : results[i].caseRec.Process_Task__r)
                            resSize = resSize+1;
                    }
                    if(resSize <= 1000)
                    {
                        lstSize += 1; 
                        results2.add(results[i]);
                    }
                    else
                    {
                        list_size2 = lstSize;
                        break;
                    }   
                }    
            }
            
            if(list_size != list_size2 && tasksOnlyFlag == false)
                list_size = list_size2;
        }
    }
    */
    public void searchData()
    {
        counter = 0;
        totFlag = true;
        loadData();
    }
    
    public void sumHours()
    {
        total_PTsize = 0.0;
        for(clientRequestWrapper ca: results)
        {
             if(ca.caseRec != null && ca.caseRec.Total_Allocated_Time__c != null)
                total_PTsize += ca.caseRec.Total_Allocated_Time__c;
             if(ca.processTaskList != null && ca.processTaskList.size() > 0)
             {
                 for(ocm_ProcessTask__c pt :ca.processTaskList)
                 {
                    if(pt.Total_Allocated_Time__c != null)
                        total_PTsize += pt.Total_Allocated_Time__c;
                 }
             }
        }
    }
    
    public void Beginning() 
    { 
        counter = 0;
        totFlag = false;
        loadData();
    }
    
    public void Previous() 
    { 
        counter -= list_size;
        totFlag = false;
        if(counter < 0)
            counter = 0;
        loadData();       
    }
    
    public void Next() 
    { 
        counter += list_size;        
        totFlag = false;
        loadData();
    }
    
    public void End() 
    { 
        counter = total_size - math.mod(total_size, list_size);
        totFlag = false;
        loadData();
    }
    
    public Boolean getDisablePrevious() 
    { 
        if(counter > 0) 
            return false; 
        else 
            return true;
    }

    public Boolean getDisableNext() 
    {
        if(counter + list_size < total_size) 
            return false; 
        else 
            return true;
    }
    
    public Integer getPageNumber() 
    {
        return counter/list_size + 1;
    }
    
    public Integer getTotalPages() 
    {
        if(total_size > 0)
        {
            if(math.mod(total_size, list_size) > 0) 
                return total_size/list_size + 1;
            else 
                return (total_size/list_size);
        }        
        else 
            return 1;  
    }
    
    public void sortData() 
    {
        try 
        { 
            if(ApexPages.currentPage().getParameters().get(OCM_Constants.OCM_SORT_BY) != null)
                sortBy = ApexPages.currentPage().getParameters().get(OCM_Constants.OCM_SORT_BY);
            if(filterInputEvent.Subject__c == sortBy)
                sortAscending = !sortAscending;
            else 
                sortAscending = true;
                filterInputEvent.Subject__c = sortBy;
            results.sort();
            if(!sortAscending) 
            {
                list<clientRequestWrapper> cloneList = results.clone();
                Integer size = results.size();
                for(Integer i=0; i < size; i++) {
                    results[i] = cloneList[size-1-i];
                }
               
            }            
        }
        catch (Exception e) {
            ApexPages.addMessage(new ApexPages.Message(ApexPages.SEVERITY.ERROR, e.getMessage()));
        }
    }
    
    
    private class clientRequestWrapper implements Comparable
    {
        public Case caseRec {set; get;}
        public list<ocm_ProcessTask__c> processTaskList {set; get;} 
        
        public Integer compareTo(Object compareTo)
        {
            clientRequestWrapper compareToPLR = (clientRequestWrapper)compareTo;
            if(sortBy == 'caseId') 
            {
                if(caseRec != null)
                {
	                if(caseRec.CaseNumber == null && compareToPLR.caseRec.CaseNumber == null)
	                    return 0;
	                if(caseRec.CaseNumber == null)
	                    return 1;
	                if(compareToPLR.caseRec.CaseNumber == null)
	                    return -1;
	                return caseRec.CaseNumber.compareTo(compareToPLR.caseRec.CaseNumber);
                }
            }
            else if(sortBy == 'desc') 
            {
                if(caseRec != null)
                {
	                if(caseRec.Subject == null && compareToPLR.caseRec.Subject == null)
	                    return 0;
	                if(caseRec.Subject == null)
	                    return 1;
	                if(compareToPLR.caseRec.Subject == null)
	                    return -1;
	                return caseRec.Subject.compareTo(compareToPLR.caseRec.Subject);
                }
            }
            else if(sortBy == 'status') 
            {
                if(caseRec != null)
                {
                   
	                if(caseRec.Status == null && compareToPLR.caseRec.Status == null)
	                    return 0;
	                if(caseRec.Status == null)
	                    return 1;
	                if(compareToPLR.caseRec.Status == null)
	                    return -1;
                    
	                return caseRec.Status.compareTo(compareToPLR.caseRec.Status);
                }
            }
            else if(sortBy == 'recOpened') 
            {
                if(caseRec != null)
                {
	                if(caseRec.Request_Received_Date__c == null && compareToPLR.caseRec.Request_Received_Date__c == null)
	                    return 0;
	                if(caseRec.Request_Received_Date__c == null)
	                    return 1;
	                if(compareToPLR.caseRec.Request_Received_Date__c == null)
	                    return -1;
	                if(date.ValueOf(caseRec.Request_Received_Date__c) < date.ValueOf(compareToPLR.caseRec.Request_Received_Date__c))
	                    return -1;
	                if(date.ValueOf(caseRec.Request_Received_Date__c) > date.ValueOf(compareToPLR.caseRec.Request_Received_Date__c))
	                    return 1;
                }
                return 0;
            }
            else if(sortBy == 'dueDate') 
            {
                if(caseRec != null)
                {
	                if(caseRec.Overall_Due_Date__c == null && compareToPLR.caseRec.Overall_Due_Date__c == null)
	                    return 0;
	                if(caseRec.Overall_Due_Date__c == null)
	                    return 1;
	                if(compareToPLR.caseRec.Overall_Due_Date__c == null)
	                    return -1;
	                if(date.ValueOf(caseRec.Overall_Due_Date__c) < date.ValueOf(compareToPLR.caseRec.Overall_Due_Date__c))
	                    return -1;
	                if(date.ValueOf(caseRec.Overall_Due_Date__c) > date.ValueOf(compareToPLR.caseRec.Overall_Due_Date__c))
	                    return 1;
                }
                return 0;
            }
            else if(sortBy == 'dateClose') 
            {
                if(caseRec != null)
                {
	                if(caseRec.Date_Closed__c == null && compareToPLR.caseRec.Date_Closed__c == null)
	                    return 0;
	                if(caseRec.Date_Closed__c == null)
	                    return 1;
	                if(compareToPLR.caseRec.Date_Closed__c == null)
	                    return -1;
	                if(date.ValueOf(caseRec.Date_Closed__c) < date.ValueOf(compareToPLR.caseRec.Date_Closed__c))
	                    return -1;
	                if(date.ValueOf(caseRec.Date_Closed__c) > date.ValueOf(compareToPLR.caseRec.Date_Closed__c))
	                    return 1;
                }
                return 0;
            }
            else if(sortBy == 'ss')
            {
                if(caseRec != null)
                {
	                if(caseRec.Strategies_Selected__c == null && compareToPLR.caseRec.Strategies_Selected__c == null)
	                    return 0;
	                if(caseRec.Strategies_Selected__c == null)
	                    return 1;
	                if(compareToPLR.caseRec.Strategies_Selected__c == null)
	                    return -1;
	                return caseRec.Strategies_Selected__c.compareTo(compareToPLR.caseRec.Strategies_Selected__c);
                }
            }
            else if(sortBy == 'sfc') 
            {
                if(caseRec != null)
                {
	                if(caseRec.Fund_Code__c == null && compareToPLR.caseRec.Fund_Code__c == null)
	                    return 0;
	                if(caseRec.Fund_Code__c == null)
	                    return 1;
	                if(compareToPLR.caseRec.Fund_Code__c == null)
	                    return -1;
	                return caseRec.Fund_Code__c.compareTo(compareToPLR.caseRec.Fund_Code__c);
                }
            }
            else if(sortBy == 'ttc') 
            {
                if(caseRec != null)
                {
	                if(caseRec.Time__c == null && compareToPLR.caseRec.Time__c == null)
	                    return 0;
	                else if(caseRec.Time__c == null && compareToPLR.caseRec.Time__c != null)                
	                    return -1;
	                else if(caseRec.Time__c != null && compareToPLR.caseRec.Time__c == null)
	                    return 1;                    
	                else if(caseRec.Time__c > compareToPLR.caseRec.Time__c)
	                    return 1;
	                else if (caseRec.Time__c < compareToPLR.caseRec.Time__c)
	                    return -1;
	                else if (caseRec.Time__c == compareToPLR.caseRec.Time__c)
	                    return 0;
                }
            }/*
            else if(sortBy == 'tat') 
            {
                if(caseRec.Total_Allocated_Time__c == null && compareToPLR.caseRec.Total_Allocated_Time__c == null)
                    return 0;
                else if(caseRec.Total_Allocated_Time__c == null && compareToPLR.caseRec.Total_Allocated_Time__c != null)                
                    return -1;
                else if(caseRec.Total_Allocated_Time__c != null && compareToPLR.caseRec.Total_Allocated_Time__c == null)
                    return 1;                    
                else if(caseRec.Total_Allocated_Time__c > compareToPLR.caseRec.Total_Allocated_Time__c)
                    return 1;
                else if (caseRec.Total_Allocated_Time__c < compareToPLR.caseRec.Total_Allocated_Time__c)
                    return -1;
                else if (caseRec.Total_Allocated_Time__c == compareToPLR.caseRec.Total_Allocated_Time__c)
                    return 0;
            }*/
            return 0;
        }  
    }
}